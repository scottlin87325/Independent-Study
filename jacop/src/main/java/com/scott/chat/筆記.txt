1. **Controller**
功能：
- 處理 HTTP 請求。
- 負責接收用戶輸入、返回響應（通常是 JSON 或 HTML）。
- 與前端或外部接口交互的入口。

是否關聯資料端：
部分相關（接收前端數據後傳遞到服務層），但控制層不直接操作資料庫。如果不是開發新功能或處理業務邏輯，最好不要頻繁改動。

2. **Service**
功能：
- 定義應用核心業務邏輯。
- 負責協調多個資料操作或調用其他外部系統。
- 處理從 Controller 層傳來的數據，並與 Repository 層交互。

是否關聯資料端：
服務層通過 Repository 或 DAO 間接操作數據，所以屬於間接關聯。如果不涉及數據端業務邏輯的修改，應儘量減少改動。

3. **Repository**
功能：
- 又稱 DAO (Data Access Object) 層，專門用於操作資料庫。
- 提供 CRUD 方法（Create, Read, Update, Delete）操作資料。
- 通常與 ORM（如 JPA、Hibernate）工具搭配使用。

是否關聯資料端：
與數據完全相關，如果不熟悉數據結構或其操作，應避免修改此層代碼。

4. **Model**
功能：
- 定義與資料庫結構對應的實體類。
- 這些類通常會與表格直接對應。

是否關聯資料端：
高度相關，因為模型定義數據的結構。如果修改模型類（如新增字段），需要注意與資料庫同步（如加上 migration 或修改表結構）。

5. **DTO（Data Transfer Object）**
功能：
- 用於數據傳輸的對象，專注於應用層數據結構。
- 與資料庫無直接關係，主要在 Controller 和 Service 之間傳遞數據。
- 用於分離後端內部數據結構（Model）和外部 API 格式。

是否關聯資料端：
幾乎無關聯。改動這些類一般是為了適應 API 格式，但改動後需要同步修改 API 文檔。

6. **Exception**
功能：
- 管理和處理程序中的異常（errors）。
- 可自定義異常類和異常處理機制。
- 提供全局或局部異常處理。

是否關聯資料端：
一般與資料庫操作有間接關聯（如查不到資料時拋出例外），但本質上是非數據層的代碼。如果異常處理邏輯正常運作，不需要輕易改動。

7. **Util（工具類）**
功能：
- 存放重用工具方法，與具體業務無關。
- 常見功能包括數據驗證、格式化、編碼/解碼等。

是否關聯資料端：
幾乎無關聯，屬於邏輯和工具函數。如果功能穩定，建議不要修改工具類。

8. **Config（配置類）**
功能：
- 管理應用程序配置（如資料庫連接、緩存、隊列、服務注入等）。
- 使用框架提供的配置方式。

是否關聯資料端：
某些配置類可能涉及資料端（如資料庫連接設置），但大部分時候與業務無關，不需要頻繁改動。

建議：哪些最好不要輕易改動？
1. **Repository（資料層）**：操作資料庫，可能導致資料異常，若非業務需求變更，請勿修改。
2. **Model（實體類）**：與數據結構直接關聯，改動需要對應修改資料庫結構。
3. **Config（配置類）**：若改動配置，可能導致系統整體行為變更，建議熟悉設置後再修改。
4. **Exception**：處理錯誤的穩定性十分重要，改動可能影響異常捕捉邏輯。

